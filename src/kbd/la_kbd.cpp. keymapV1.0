#include "la_kbd.h"
#include "lv_keyboard.h"

extern void lv_kb_ta_del_by_backspace(lv_obj_t* ta); // สำหรับ สั่งลบ char เมื่อมีการกดปุ่ม backspace

// ກຂຄງຈຊຍດຕຖທນບປຜຝພຟມຢຣລວສຫອຮ
// ະັາຳິີຶືຸູົຼຽເແໂໃໄໆ່້໊໋໌ໍ

static const char *la_kbd_map[][24] = {
  {
    SYMBOL_OK,   "ກ", "ຂ", "ຄ",    SYMBOL_BACKSPACE,  "\n",
    "ະ າ  ິ",    "ງ", "ຈ", "ຊ",    "123", "\n",
    "່  ້  ໊",  "ຍ", "ດ", "ຕ",     SYMBOL_KEYBOARD, "\n", 
    SYMBOL_ARROW_LEFT, SYMBOL_LEFT, " ", SYMBOL_RIGHT, SYMBOL_ARROW_RIGHT, ""
  }, //0
  {
    SYMBOL_OK,  "ຖ", "ທ", "ນ",  SYMBOL_BACKSPACE,  "\n",
    "ະ າ  ິ",   "ບ", "ປ", "ຜ",  "123", "\n",
    "່  ້  ໊", "ຝ", "ພ", "ຟ",   SYMBOL_KEYBOARD, "\n",
    SYMBOL_ARROW_LEFT, SYMBOL_LEFT, " ", SYMBOL_RIGHT, SYMBOL_ARROW_RIGHT, ""
  }, //1
  {
    SYMBOL_OK,   "ມ", "ຢ", "ຣ",    SYMBOL_BACKSPACE,  "\n",
    "ະ າ  ິ",    "ລ", "ວ", "ສ",    "123", "\n",
    "່  ້  ໊",  "ຫ", "ອ", "ຮ",    SYMBOL_KEYBOARD, "\n",
    SYMBOL_ARROW_LEFT, SYMBOL_LEFT, " ", SYMBOL_RIGHT, SYMBOL_ARROW_RIGHT, ""
  }, //2
  
  //------ สระ --------------------
  {
    SYMBOL_OK,     "ະ", "ັ", "າ",    SYMBOL_BACKSPACE,  "\n",
    "ກຂຄ",         "ຳ", "ົ", "ິ",   "123", "\n",
    "່  ້  ໊",    "ີ", "ຶ", "ື",   SYMBOL_KEYBOARD, "\n",
    SYMBOL_ARROW_LEFT, SYMBOL_LEFT, " ", SYMBOL_RIGHT, SYMBOL_ARROW_RIGHT, ""
  }, //3
  {
    SYMBOL_OK,    "ຸ",  "ູ", "ຼ",    SYMBOL_BACKSPACE,  "\n",
    "ກຂຄ",        "ຽ", "ເ", "ແ",   "123", "\n",
    "່  ້  ໊",    "ໂ", "ໃ", "ໄ",    SYMBOL_KEYBOARD, "\n",
    SYMBOL_ARROW_LEFT, SYMBOL_LEFT, " ", SYMBOL_RIGHT, SYMBOL_ARROW_RIGHT, ""
  }, //4

  {
    SYMBOL_OK,     "ໆ",  "", "",   SYMBOL_BACKSPACE,  "\n",
    "ກຂຄ",         "", "ໜ", "ໝ", "123", "\n",
    "່  ້  ໊",     "ຯ",  "₭", "•",   SYMBOL_KEYBOARD, "\n",
    SYMBOL_ARROW_LEFT, SYMBOL_LEFT, " ", SYMBOL_RIGHT, SYMBOL_ARROW_RIGHT, ""
  }, //5

  //------ วรรณยุกต์ --------------------
  {
    SYMBOL_OK,    "່", "້", "໊",    SYMBOL_BACKSPACE,  "\n",
    "ກຂຄ",        "໋", "໌", "ໍ",    "123", "\n",
    "ະ າ  ິ",      "", "", "",    SYMBOL_KEYBOARD, "\n",
    SYMBOL_ARROW_LEFT, SYMBOL_LEFT, " ", SYMBOL_RIGHT, SYMBOL_ARROW_RIGHT, ""
  }, //6
  {
    SYMBOL_OK,    "", "", "",    SYMBOL_BACKSPACE,  "\n",
    "ກຂຄ",        "", "", "",    "123", "\n",
    "ະ າ  ິ",     "", "", "" ,    SYMBOL_KEYBOARD, "\n",
    SYMBOL_ARROW_LEFT, SYMBOL_LEFT, " ", SYMBOL_RIGHT, SYMBOL_ARROW_RIGHT, ""
  }, //7
  {
    SYMBOL_OK,   "", "", "" ,    SYMBOL_BACKSPACE,  "\n",
    "ກຂຄ",      "$", "₭", "฿" ,    "123", "\n",
    "ະ າ  ິ",    "¢", "£", "€" ,    SYMBOL_KEYBOARD, "\n",
    SYMBOL_ARROW_LEFT, SYMBOL_LEFT, " ", SYMBOL_RIGHT, SYMBOL_ARROW_RIGHT, ""
  }, //8
  //------ เลขไทย/อารบิค --------------------
  {
    SYMBOL_OK,    "໗", "໘", "໙",   SYMBOL_BACKSPACE,  "\n",
    "ກຂຄ",        "໔", "໕", "໖",  "123", "\n",
    "ະ າ  ິ",     "໑", "໒", "໓",    SYMBOL_KEYBOARD, "\n",
    SYMBOL_ARROW_LEFT, "໐", ".", ","    ,SYMBOL_ARROW_RIGHT, ""
  }, //9
  {
    SYMBOL_OK,    "+", "-", "*", SYMBOL_BACKSPACE,  "\n",
    "ກຂຄ",        "/", "\\", "[","123", "\n",
    "ະ າ  ິ",      "(", ")", "]",  SYMBOL_KEYBOARD, "\n", // 
    SYMBOL_ARROW_LEFT, "<", ">", "=" ,SYMBOL_ARROW_RIGHT, ""
  }, //10
  {
    SYMBOL_OK,   "\"", "'", "`",   SYMBOL_BACKSPACE,  "\n",
    "ກຂຄ",       "!", "#", "?",    "123", "\n",
    "ະ າ  ິ",     ":", ";", "|",    SYMBOL_KEYBOARD, "\n", // 
    SYMBOL_ARROW_LEFT,"&", "%", "^" ,   SYMBOL_ARROW_RIGHT, ""
  }, //11
  {
    SYMBOL_OK,   "°", "±", "µ",    SYMBOL_BACKSPACE,  "\n",  //!"#$%&':;?\^_`|±  ©®±µ™¢£¥•–—€≈≤≥
    "ກຂຄ",       "©", "®", "_",   "123", "\n",
    "ະ າ  ິ",     "£", "¢", "€",   SYMBOL_KEYBOARD, "\n", // 
    SYMBOL_ARROW_LEFT, "~" , "•", "≈" ,  SYMBOL_ARROW_RIGHT, ""
  }, //12

};


void la_kb_event_handler(lv_obj_t*kb, lv_event_t event) {
  static int8_t kb_id = 0;
  static enum { LA_KBD_ALPHABET, LA_KBD_SARA, LA_KBD_VANNAYUK, LA_KBD_NUMPAD } la_kbd_type = LA_KBD_ALPHABET;
  
  if (event != LV_EVENT_VALUE_CHANGED) return;

  lv_kb_ext_t * ext = (lv_kb_ext_t *) lv_obj_get_ext_attr(kb);
  keyboard_ext_t * kbd_ext = (keyboard_ext_t*) lv_obj_get_ext_attr(lv_obj_get_parent(lv_obj_get_parent(kb)));

  uint16_t btn_id   = lv_btnm_get_active_btn(kb);
  if (btn_id == LV_BTNM_BTN_NONE) return;

  if (lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_HIDDEN | LV_BTNM_CTRL_INACTIVE)) return;
  if (lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_NO_REPEAT) && event == LV_EVENT_LONG_PRESSED_REPEAT) return;

  const char * txt = lv_btnm_get_active_btn_text(kb);
  if (txt == NULL) return;

  /*Do the corresponding action according to the text of the button*/
  if (strcmp(txt, SYMBOL_CLOSE) == 0) {
    if (kb->event_cb != lv_kb_def_event_cb) {
      kb->event_cb = (kbd_ext->kb_event_cb == NULL)? keyboard_def_event_cb : kbd_ext->kb_event_cb;
      lv_res_t res = lv_event_send(kb, LV_EVENT_CANCEL, NULL);
      if (res != LV_RES_OK) return;
    } else {
      lv_kb_set_ta(kb, NULL); /*De-assign the text area  to hide it cursor if needed*/
      return;
    }
    return;
  }
  else if (strcmp(txt, SYMBOL_OK) == 0) {
    if (kb->event_cb != lv_kb_def_event_cb) {
      kb->event_cb = (kbd_ext->kb_event_cb == NULL)? keyboard_def_event_cb : kbd_ext->kb_event_cb;
      lv_res_t res = lv_event_send(kb, LV_EVENT_APPLY, NULL);
      if (res != LV_RES_OK) return;
    } else {
      lv_kb_set_ta(kb, NULL); /*De-assign the text area to hide it cursor if needed*/
    }
    return;
  }
  // สลับแป้นพิมพ์------------------------
  else if (strcmp(txt, SYMBOL_KEYBOARD) == 0) {
    lv_kb_load_en_kbd(kb);
    return;
  }

  else if (strcmp(txt, SYMBOL_ARROW_LEFT) == 0) {
    switch(la_kbd_type) {
      case LA_KBD_ALPHABET:
        if(kb_id>0) { kb_id--; } else { kb_id = 2; }
        // lv_kb_set_map(kb, la_kbd_map[kb_id]);
        lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
        lv_btnm_set_ctrl_map(kb, kbd_ctrl_map);
        break;
      case LA_KBD_SARA:
      case LA_KBD_VANNAYUK:
        if(kb_id>3) { kb_id--; } else { kb_id = 8; }
        // lv_kb_set_map(kb, la_kbd_map[kb_id]);
        lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
        lv_btnm_set_ctrl_map(kb, kbd_ctrl_map);
        break;
      case LA_KBD_NUMPAD:
        if(kb_id>9) { kb_id--; } else { kb_id = 12; }
        // lv_kb_set_map(kb, la_kbd_map[kb_id]);
        lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
        lv_btnm_set_ctrl_map(kb, kbd_num_ctrl_map);
        break;
    }
    return;
  }
  else if (strcmp(txt, SYMBOL_ARROW_RIGHT) == 0){
    switch(la_kbd_type) {
      case LA_KBD_ALPHABET:
        if(kb_id<2) { kb_id++; } else { kb_id = 0; }
        // lv_kb_set_map(kb, la_kbd_map[kb_id]);
        lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
        lv_btnm_set_ctrl_map(kb, kbd_ctrl_map);
        break;
      case LA_KBD_SARA:
      case LA_KBD_VANNAYUK:
        if(kb_id<8) { kb_id++; } else { kb_id = 3; }
        // lv_kb_set_map(kb, la_kbd_map[kb_id]);
        lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
        lv_btnm_set_ctrl_map(kb, kbd_ctrl_map);
        break;
      case LA_KBD_NUMPAD:
        if(kb_id<12) { kb_id++; } else { kb_id = 9; }
        // lv_kb_set_map(kb, la_kbd_map[kb_id]);
        lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
        lv_btnm_set_ctrl_map(kb, kbd_num_ctrl_map);
        break;
    }
    return;
  }
  else if (strcmp(txt, "ກຂຄ") == 0) {
    la_kbd_type = LA_KBD_ALPHABET;

    kb_id = 0;
    // lv_kb_set_map(kb, la_kbd_map[kb_id]);
    lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
    lv_btnm_set_ctrl_map(kb, kbd_ctrl_map);
    return;
  }
  else if (strcmp(txt, "ະ າ  ິ") == 0) {
    la_kbd_type = LA_KBD_SARA;
    
    kb_id = 3;
    // lv_kb_set_map(kb, la_kbd_map[kb_id]);
    lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
    lv_btnm_set_ctrl_map(kb, kbd_ctrl_map);
    return;
  }
  else if (strcmp(txt, "່  ້  ໊") == 0) {
    la_kbd_type = LA_KBD_VANNAYUK;
    
    kb_id = 6;
    // lv_kb_set_map(kb, la_kbd_map[kb_id]);
    lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
    lv_btnm_set_ctrl_map(kb, kbd_ctrl_map);
    return;
  }
  else if (strcmp(txt, "123") == 0) {
    la_kbd_type = LA_KBD_NUMPAD;
    kb_id = 9;
    // lv_kb_set_map(kb, la_kbd_map[kb_id]);
    lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[kb_id]);
    lv_btnm_set_ctrl_map(kb, kbd_num_ctrl_map);
    return;
  }


  /*Add the characters to the text area if set*/
  if (ext->ta == NULL) return;

  //----------------------------------------------------------------
  if (strcmp(txt, SYMBOL_LEFT) == 0)
    lv_ta_cursor_left(ext->ta);
  else if (strcmp(txt, SYMBOL_RIGHT) == 0)
    lv_ta_cursor_right(ext->ta);
  else if (strcmp(txt, SYMBOL_BACKSPACE) == 0){
    // lv_la_del_char(ext->ta);
    lv_kb_ta_del_by_backspace(ext->ta);
  }
  //----------------------------------------------------------------
  else {
    lv_obj_t* label = lv_ta_get_label(ext->ta);
    uint32_t sel_start = lv_label_get_text_sel_start(label);
    if(sel_start != LV_DRAW_LABEL_NO_TXT_SEL) {
      lv_kb_ta_del_by_backspace(ext->ta);
    }

    lv_ta_add_text(ext->ta, txt);
  }
}

void lv_kb_load_la_kbd(lv_obj_t* kb) {
  // printf("LAOS KBD load\n");

  // lv_kb_set_map(kb, la_kbd_map[0]);
  lv_kb_set_map(kb, LV_KB_MODE_TEXT_LOWER, la_kbd_map[0]);
  lv_btnm_set_ctrl_map(kb, kbd_ctrl_map);
  lv_obj_set_event_cb(kb, la_kb_event_handler);

  // GKeyboard* pKBD = (GKeyboard*) lv_obj_get_user_data(kb);
  // pKBD->language(KBD_THAI);
  keyboard_ext_t * kbd_ext = (keyboard_ext_t*) lv_obj_get_ext_attr(lv_obj_get_parent(lv_obj_get_parent(kb)));
  kbd_ext->language = KBD_THAI;

}

