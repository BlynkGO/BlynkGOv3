/**************************************************************************************
 * 
 * GContainer เป็นวิตเจ็ต สำหรับรวม กลุ่มวิตเจ็ตอื่นๆเข้าด้วยกัน
 *   โดยจะมี API สำคัญ หลัก อยู่ 3 กลุ่ม API
 *   คือ
 *   1. API คำสั่งกลุ่ม fit(..), fit2(..), fit4(..) 
 *      สำหรับกำหนดการปรับขนาดกว้างยาวพอดีแบบอัตโนมัติ
 *      FIT_NONE  : ไม่มีการปรับขนาดพอดีแบบอัตโนมัติ
 *      FIT_TIGHT : ปรับขนาดพอดี แบบพอดีครอบคลุม เลเยอร์ลูกๆ
 *      FIT_FLOOD : ปรับขนาดพอดี แบบขยายไปเท่า เลเยอร์แม่
 *      FIT_FILL  : เหมือน FIT_FLOOD หาก เลเยอร์ลูก เลยกว่านั้นไปอีกก็ปรับขนาดพอดีตามเลเยอร์ลูก
 *     ค่าเริ่มต้นของ GContainer จะเป็น FIT_TIGHT
 *     
 *   2. API คำสั่ง layout(..)
 *      สำหรับจัดวางตำแหน่ง เลเยอร์ลูกๆ อัตโนมัติ ด้วย layout ที่กำหนด
 *      
 *      LAYOUT_OFF    : ไม่มีการกำหนด layout, เลเยอร์ลูกๆ ให้มีการกำหนดจัดตำแหน่งเอง
 *      LAYOUT_CENTER : จัด layout แบบตรงกลาง
 *      LAYOUT_COL_L  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว column ชิดซ้ายตรงกัน
 *      LAYOUT_COL_M  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว column ชิดแนวกลางตรงกัน
 *      LAYOUT_COL_R  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว column ชิดขวาตรงกัน
 *      LAYOUT_ROW_T  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว row (แถว) ให้ชิดด้านบนแถวตรงกัน
 *      LAYOUT_ROW_M  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว row (แถว) ให้ชิดกลางแถวตรงกัน
 *      LAYOUT_ROW_B  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว row (แถว) ให้ชิดด้านล่างแถวตรงกัน
 *      LAYOUT_PRETTY : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว แบบสวยงามอัตโนมัติ
 *      LAYOUT_GRID   : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนวตาราง grid อัตโนมัติ
 *      
 *   3. API คำสั่งกลุ่มกำหนดระยะช่องไฟ padding(..), padding_XXX(...)
 *      ในการกำหนด fit(..) ขนาดของ GContainer อัตโนมัติ
 *      และการกำหนด layout(..) จะมีการใช้ ระยะช่องไฟ มาเกี่ยวข้องด้วยเสมอ
 *      โดยสามารถกำหนดระยะช่องไฟได้จาก API ในกลุ่มนี้
 *      
 *      padding_top(..)    : ใช้กำหนดระยะช่องไฟด้านบน
 *      padding_bottom(..) : ใช้กำหนดระยะช่องไฟด้านล่าง
 *      padding_left(..)   : ใช้กำหนดระยะช่องไฟด้านซ้าย
 *      padding_right(..)  : ใช้กำหนดระยะช่องไฟด้านขวา
 *      padding_inner(..)  : ใช้กำหนดระยะช่องไฟภายในระหว่าง วิตเจ็ตลูกๆด้วยกัน
 *      padding(..)        : ใช้กำหนดระยะช่องไฟทุกด้าน ด้วยค่านี้ค่าเดียวให้ตรงกัน
 * 
 **************************************************************************************/

/**************************************************************************************
 * 
 *  ตัวอย่างนี้เป็นการรวมกลุ่ม GImage และ GLabel เข้าด้วยกันด้วย GContainer
 *  โดยจะถูกจัดเรียงตำแหน่งอัตโนมัติด้วยคำสั่ง API  layout(..) ของ container
 *  และ container ได้มีการกำหนดขนาดเองอัตโนมัติ ด้วยคำสั่ง API  fit(..)
 *  โดยมีการการปรับขนาดที่รวมระยะช่องไฟ padding_XXX() แล้ว
 *  
 *  ข้อดี 
 *    - container ไม่ต้องมาปรับขนาด กว่าง x ยาว เอง ให้ครอบคลุม เลเยอร์ลูกๆ
 *    - ลูกๆ ของ container ไม่ต้องมากำหนดตำแหน่งเอง
 *    
 **************************************************************************************/

#include <BlynkGOv3.h>

// resource รูปแบบ c file ประกาศก่อนใช้ใน วิตเจ็ต
IMG_DECLARE(img_clash_royale);

/* ประกาศตัวแปร GContainer*/
GContainer container;

GImage image(img_clash_royale);     // Widget สำหรับ รูปภาพ
GLabel label("เกมส์ Clash Royale");  // Widget สำหรับ ข้อความ

void setup() {
  Serial.begin(115200); Serial.println();
  BlynkGO.begin();
  
  // ปรับขนาดพอดี ด้วยคำสั่ง fit(..) 
  // โดยให้ fit ด้านกว้าง ปรับขนาดความกว้างให้พอดีเท่า ความกว้างของ parent ด้วย FIT_FLOOD
  // และให้ด้านสูง ปรับขนาดความสูงให้พอดีให้ครอบคลุมเลเยอร์ child ที่มีทั้งหมด ด้วย FIT_TIGHT
  container.fit(FIT_FLOOD, FIT_TIGHT); 

  //จัด Layout ของ ลูกๆ ให้เรียงตำแหน่งแบบแนวตั้งกลาง
  container.layout(LAYOUT_COL_M); 

  // จัดระยะช่องไฟด้านบนเป็น 30 pixel
  container.padding_top(30);

  // กำหนดสี (หรือ จะใช้คำสั่ง API อื่นๆ แบบเดียวกับวิตเจ็ต GRect ได้ตามต้องการ)
  container.color(TFT_BROWN);
  container.corner_radius(20);

  
  image.parent(container);  // ให้ image มีแม่คือ container 
  label.parent(container);  // ให้ label มีแม่คือ containter

}

void loop() {
  BlynkGO.update();
}

