/**************************************************************************************
 * 
 * GContainer เป็นวิตเจ็ต สำหรับรวม กลุ่มวิตเจ็ตอื่นๆเข้าด้วยกัน
 *   โดยจะมี API สำคัญ หลัก อยู่ 3 กลุ่ม API
 *   คือ
 *   1. API คำสั่งกลุ่ม fit(..), fit2(..), fit4(..) 
 *      สำหรับกำหนดการปรับขนาดกว้างยาวพอดีแบบอัตโนมัติ
 *      FIT_NONE  : ไม่มีการปรับขนาดพอดีแบบอัตโนมัติ
 *      FIT_TIGHT : ปรับขนาดพอดี แบบพอดีครอบคลุม เลเยอร์ลูกๆ
 *      FIT_FLOOD : ปรับขนาดพอดี แบบขยายไปเท่า เลเยอร์แม่
 *      FIT_FILL  : เหมือน FIT_FLOOD หาก เลเยอร์ลูก เลยกว่านั้นไปอีกก็ปรับขนาดพอดีตามเลเยอร์ลูก
 *     ค่าเริ่มต้นของ GContainer จะเป็น FIT_TIGHT
 *     
 *   2. API คำสั่ง layout(..)
 *      สำหรับจัดวางตำแหน่ง เลเยอร์ลูกๆ อัตโนมัติ ด้วย layout ที่กำหนด
 *      
 *      LAYOUT_OFF    : ไม่มีการกำหนด layout, เลเยอร์ลูกๆ ให้มีการกำหนดจัดตำแหน่งเอง
 *      LAYOUT_CENTER : จัด layout แบบตรงกลาง
 *      LAYOUT_COL_L  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว column ชิดซ้ายตรงกัน
 *      LAYOUT_COL_M  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว column ชิดแนวกลางตรงกัน
 *      LAYOUT_COL_R  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว column ชิดขวาตรงกัน
 *      LAYOUT_ROW_T  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว row (แถว) ให้ชิดด้านบนแถวตรงกัน
 *      LAYOUT_ROW_M  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว row (แถว) ให้ชิดกลางแถวตรงกัน
 *      LAYOUT_ROW_B  : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว row (แถว) ให้ชิดด้านล่างแถวตรงกัน
 *      LAYOUT_PRETTY : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนว แบบสวยงามอัตโนมัติ
 *      LAYOUT_GRID   : ให้เลเยอร์ลูกๆ จัดเรียงแบบแนวตาราง grid อัตโนมัติ
 *      
 *   3. API คำสั่งกลุ่มกำหนดระยะช่องไฟ padding(..), padding_XXX(...)
 *      ในการกำหนด fit(..) ขนาดของ GContainer อัตโนมัติ
 *      และการกำหนด layout(..) จะมีการใช้ ระยะช่องไฟ มาเกี่ยวข้องด้วยเสมอ
 *      โดยสามารถกำหนดระยะช่องไฟได้จาก API ในกลุ่มนี้
 *      
 *      padding_top(..)    : ใช้กำหนดระยะช่องไฟด้านบน
 *      padding_bottom(..) : ใช้กำหนดระยะช่องไฟด้านล่าง
 *      padding_left(..)   : ใช้กำหนดระยะช่องไฟด้านซ้าย
 *      padding_right(..)  : ใช้กำหนดระยะช่องไฟด้านขวา
 *      padding_inner(..)  : ใช้กำหนดระยะช่องไฟภายในระหว่าง วิตเจ็ตลูกๆด้วยกัน
 *      padding(..)        : ใช้กำหนดระยะช่องไฟทุกด้าน ด้วยค่านี้ค่าเดียวให้ตรงกัน
 * 
 **************************************************************************************/


#include <BlynkGOv3.h>

/* ประกาศตัวแปร GContainer*/
GContainer container;

/* ประกาศ GLabel 4 ชุด และกำหนดให้เป็น child ของ container */
GLabel label[4] = { {container}, {container}, {container}, {container} };

void setup() {
  Serial.begin(115200); Serial.println();
  BlynkGO.begin();

  // กำหนดการจัดวาง Layout สำหรับจัดเรียง childs ภายใน container 
  // ให้เรียงตาม coloum แบบชิดขวา
  container.layout(LAYOUT_COL_R); 

  container.fit(FIT_TIGHT);  // ปรับขนาดแบบให้พอดีกับวิตเจ็ตลูกๆ (โดยมีระยะช่องไฟบน/ล่าง/ซ้าย/ขวา ร่วมด้วย)

  // container.padding_top(10);     // กำหนดระยะช่องไฟด้านบน
  // container.padding_bottom(5);   // กำหนดระยะช่องไฟด้านล่าง
  // container.padding_left(20);    // กำหนดระยะช่องไฟด้านซ้าย
  // container.padding_right(20);   // กำหนดระยะช่องไฟด้านขวา
  // container.padding_inner(5);    // กำหนดระยะช่องไฟภายในระหว่างวิตเจ็ตลูกๆ
  
  // กำหนด สีข้อความ สำหรับใช้ภายใน container ด้วยสีแดง 
  // โดย child ข้อความใดๆ หากไม่กำหนดสีเอง จะใช้สีนี้
  container.text_color(TFT_RED);
  
  // กำหนดข้อความให้ GLabel ต่างๆ
  // โดยจะถูกกำหนดให้กลายเป็น child บรรจุภายใน GContainer อัตโนมัติ
  // และมีการจัดวางเรียงตำแหน่งให้ ไปตาม  layout ของ GContainer
  label[0] = "นี่ คือ Container";
  label[1] = "Layout แบบชิดขวา";
  label[2] = "ข้อความสีฟ้า";  label[2].color(TFT_BLUE);
  label[3] = "Hello World";

}

void loop() {
  BlynkGO.update();
}


